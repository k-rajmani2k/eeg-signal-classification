{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1a6ee8f7",
   "metadata": {
    "papermill": {
     "duration": 0.013338,
     "end_time": "2024-09-25T02:13:16.544356",
     "exception": false,
     "start_time": "2024-09-25T02:13:16.531018",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Introduction\n",
    "\n",
    "In the ever-evolving landscape of neuroscience and technology, the ability to decode human emotions from brain signals has emerged as a captivating frontier. This research delves into the fascinating realm of EEG-based emotion classification, proposing a novel Hybrid Ensemble Stacking Model (HESM) and comparing its performance against a pre-existing Convolutional Neural Network (CNN) model.\n",
    "\n",
    "Methodology\n",
    "\n",
    "Data Preparation and Feature Extraction: Raw EEG data is preprocessed, and relevant features are extracted to capture the intricate patterns associated with different emotional states.\n",
    "\n",
    "Hybrid Ensemble Stacking Model (HESM):\n",
    "\n",
    "Level 0: Base Classifiers: HESM employs a diverse set of base classifiers, each chosen for their strengths in handling EEG data:\n",
    "\n",
    "Logistic Regression (LR): Provides a robust baseline and interpretability.\n",
    "\n",
    "Support Vector Machine (SVM): Excels at high-dimensional data and finding decision boundaries.\n",
    "Linear SVC (LSVC): Computationally efficient for linear separation tasks.\n",
    "\n",
    "Multi-Layer Perceptron (MLP): Captures complex non-linear relationships.\n",
    "\n",
    "Level 1: Meta-Learner: A meta-learner intelligently analyzes the outputs of the base classifiers, dynamically selecting the best-performing models (up to two) for each instance, aiming to maximize accuracy.\n",
    "\n",
    "Model Training and Optimization: The base classifiers within HESM and the pre-existing CNN model are trained. Hyperparameter optimization through grid search is performed for both models to ensure optimal configurations.\n",
    "\n",
    "Evaluation and Comparison: The HESM ensemble (with its dynamically selected models) and the pre-existing CNN model are rigorously evaluated and compared using various performance metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "65376f45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:13:16.571551Z",
     "iopub.status.busy": "2024-09-25T02:13:16.570660Z",
     "iopub.status.idle": "2024-09-25T02:13:20.525765Z",
     "shell.execute_reply": "2024-09-25T02:13:20.524545Z"
    },
    "papermill": {
     "duration": 3.971781,
     "end_time": "2024-09-25T02:13:20.528685",
     "exception": false,
     "start_time": "2024-09-25T02:13:16.556904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "from warnings import filterwarnings\n",
    "from sklearn.exceptions import ConvergenceWarning\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import sys\n",
    "import time\n",
    "import pandas as pd\n",
    "import networkx as nx\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf84ab63",
   "metadata": {
    "papermill": {
     "duration": 0.011971,
     "end_time": "2024-09-25T02:13:20.553065",
     "exception": false,
     "start_time": "2024-09-25T02:13:20.541094",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Import dataset and view data info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f28f32eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:13:20.579636Z",
     "iopub.status.busy": "2024-09-25T02:13:20.578771Z",
     "iopub.status.idle": "2024-09-25T02:13:22.909582Z",
     "shell.execute_reply": "2024-09-25T02:13:22.905541Z"
    },
    "papermill": {
     "duration": 2.347824,
     "end_time": "2024-09-25T02:13:22.913276",
     "exception": false,
     "start_time": "2024-09-25T02:13:20.565452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th># mean_0_a</th>\n",
       "      <th>mean_1_a</th>\n",
       "      <th>mean_2_a</th>\n",
       "      <th>mean_3_a</th>\n",
       "      <th>mean_4_a</th>\n",
       "      <th>mean_d_0_a</th>\n",
       "      <th>mean_d_1_a</th>\n",
       "      <th>mean_d_2_a</th>\n",
       "      <th>mean_d_3_a</th>\n",
       "      <th>mean_d_4_a</th>\n",
       "      <th>...</th>\n",
       "      <th>fft_741_b</th>\n",
       "      <th>fft_742_b</th>\n",
       "      <th>fft_743_b</th>\n",
       "      <th>fft_744_b</th>\n",
       "      <th>fft_745_b</th>\n",
       "      <th>fft_746_b</th>\n",
       "      <th>fft_747_b</th>\n",
       "      <th>fft_748_b</th>\n",
       "      <th>fft_749_b</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.62</td>\n",
       "      <td>30.3</td>\n",
       "      <td>-356.0</td>\n",
       "      <td>15.6</td>\n",
       "      <td>26.3</td>\n",
       "      <td>1.070</td>\n",
       "      <td>0.411</td>\n",
       "      <td>-15.70</td>\n",
       "      <td>2.06</td>\n",
       "      <td>3.15</td>\n",
       "      <td>...</td>\n",
       "      <td>23.5</td>\n",
       "      <td>20.3</td>\n",
       "      <td>20.3</td>\n",
       "      <td>23.5</td>\n",
       "      <td>-215.0</td>\n",
       "      <td>280.00</td>\n",
       "      <td>-162.00</td>\n",
       "      <td>-162.00</td>\n",
       "      <td>280.00</td>\n",
       "      <td>NEGATIVE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>28.80</td>\n",
       "      <td>33.1</td>\n",
       "      <td>32.0</td>\n",
       "      <td>25.8</td>\n",
       "      <td>22.8</td>\n",
       "      <td>6.550</td>\n",
       "      <td>1.680</td>\n",
       "      <td>2.88</td>\n",
       "      <td>3.83</td>\n",
       "      <td>-4.82</td>\n",
       "      <td>...</td>\n",
       "      <td>-23.3</td>\n",
       "      <td>-21.8</td>\n",
       "      <td>-21.8</td>\n",
       "      <td>-23.3</td>\n",
       "      <td>182.0</td>\n",
       "      <td>2.57</td>\n",
       "      <td>-31.60</td>\n",
       "      <td>-31.60</td>\n",
       "      <td>2.57</td>\n",
       "      <td>NEUTRAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.90</td>\n",
       "      <td>29.4</td>\n",
       "      <td>-416.0</td>\n",
       "      <td>16.7</td>\n",
       "      <td>23.7</td>\n",
       "      <td>79.900</td>\n",
       "      <td>3.360</td>\n",
       "      <td>90.20</td>\n",
       "      <td>89.90</td>\n",
       "      <td>2.03</td>\n",
       "      <td>...</td>\n",
       "      <td>462.0</td>\n",
       "      <td>-233.0</td>\n",
       "      <td>-233.0</td>\n",
       "      <td>462.0</td>\n",
       "      <td>-267.0</td>\n",
       "      <td>281.00</td>\n",
       "      <td>-148.00</td>\n",
       "      <td>-148.00</td>\n",
       "      <td>281.00</td>\n",
       "      <td>POSITIVE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14.90</td>\n",
       "      <td>31.6</td>\n",
       "      <td>-143.0</td>\n",
       "      <td>19.8</td>\n",
       "      <td>24.3</td>\n",
       "      <td>-0.584</td>\n",
       "      <td>-0.284</td>\n",
       "      <td>8.82</td>\n",
       "      <td>2.30</td>\n",
       "      <td>-1.97</td>\n",
       "      <td>...</td>\n",
       "      <td>299.0</td>\n",
       "      <td>-243.0</td>\n",
       "      <td>-243.0</td>\n",
       "      <td>299.0</td>\n",
       "      <td>132.0</td>\n",
       "      <td>-12.40</td>\n",
       "      <td>9.53</td>\n",
       "      <td>9.53</td>\n",
       "      <td>-12.40</td>\n",
       "      <td>POSITIVE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28.30</td>\n",
       "      <td>31.3</td>\n",
       "      <td>45.2</td>\n",
       "      <td>27.3</td>\n",
       "      <td>24.5</td>\n",
       "      <td>34.800</td>\n",
       "      <td>-5.790</td>\n",
       "      <td>3.06</td>\n",
       "      <td>41.40</td>\n",
       "      <td>5.52</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>38.1</td>\n",
       "      <td>38.1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>-17.60</td>\n",
       "      <td>23.90</td>\n",
       "      <td>23.90</td>\n",
       "      <td>-17.60</td>\n",
       "      <td>NEUTRAL</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 2549 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   # mean_0_a  mean_1_a  mean_2_a  mean_3_a  mean_4_a  mean_d_0_a  mean_d_1_a  \\\n",
       "0        4.62      30.3    -356.0      15.6      26.3       1.070       0.411   \n",
       "1       28.80      33.1      32.0      25.8      22.8       6.550       1.680   \n",
       "2        8.90      29.4    -416.0      16.7      23.7      79.900       3.360   \n",
       "3       14.90      31.6    -143.0      19.8      24.3      -0.584      -0.284   \n",
       "4       28.30      31.3      45.2      27.3      24.5      34.800      -5.790   \n",
       "\n",
       "   mean_d_2_a  mean_d_3_a  mean_d_4_a  ...  fft_741_b  fft_742_b  fft_743_b  \\\n",
       "0      -15.70        2.06        3.15  ...       23.5       20.3       20.3   \n",
       "1        2.88        3.83       -4.82  ...      -23.3      -21.8      -21.8   \n",
       "2       90.20       89.90        2.03  ...      462.0     -233.0     -233.0   \n",
       "3        8.82        2.30       -1.97  ...      299.0     -243.0     -243.0   \n",
       "4        3.06       41.40        5.52  ...       12.0       38.1       38.1   \n",
       "\n",
       "   fft_744_b  fft_745_b  fft_746_b  fft_747_b  fft_748_b  fft_749_b     label  \n",
       "0       23.5     -215.0     280.00    -162.00    -162.00     280.00  NEGATIVE  \n",
       "1      -23.3      182.0       2.57     -31.60     -31.60       2.57   NEUTRAL  \n",
       "2      462.0     -267.0     281.00    -148.00    -148.00     281.00  POSITIVE  \n",
       "3      299.0      132.0     -12.40       9.53       9.53     -12.40  POSITIVE  \n",
       "4       12.0      119.0     -17.60      23.90      23.90     -17.60   NEUTRAL  \n",
       "\n",
       "[5 rows x 2549 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/eeg-brainwave-dataset-feeling-emotions/emotions.csv\")\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f61076a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:13:22.942529Z",
     "iopub.status.busy": "2024-09-25T02:13:22.942134Z",
     "iopub.status.idle": "2024-09-25T02:13:23.280324Z",
     "shell.execute_reply": "2024-09-25T02:13:23.278925Z"
    },
    "papermill": {
     "duration": 0.356355,
     "end_time": "2024-09-25T02:13:23.283211",
     "exception": false,
     "start_time": "2024-09-25T02:13:22.926856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "palette = sns.color_palette(\"pastel\")\n",
    "plt.figure(figsize=(8, 6))\n",
    "bars = df[\"label\"].value_counts().plot(kind='bar', color=palette)\n",
    "plt.ylabel('Value Counts')\n",
    "plt.xticks(rotation=0)\n",
    "\n",
    "for i, v in enumerate(df[\"label\"].value_counts()):\n",
    "    plt.text(i, v, str(v), ha='center', va='bottom', fontsize=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "846bca1a",
   "metadata": {
    "papermill": {
     "duration": 0.013299,
     "end_time": "2024-09-25T02:13:23.310152",
     "exception": false,
     "start_time": "2024-09-25T02:13:23.296853",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Our sample counts are relatively balanced, so no further adjustments to the samples needed "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "67682466",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:13:23.338731Z",
     "iopub.status.busy": "2024-09-25T02:13:23.338188Z",
     "iopub.status.idle": "2024-09-25T02:13:29.470286Z",
     "shell.execute_reply": "2024-09-25T02:13:29.469221Z"
    },
    "papermill": {
     "duration": 6.149792,
     "end_time": "2024-09-25T02:13:29.473067",
     "exception": false,
     "start_time": "2024-09-25T02:13:23.323275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2132 entries, 0 to 2131\n",
      "Columns: 2549 entries, # mean_0_a to label\n",
      "dtypes: float64(2548), object(1)\n",
      "memory usage: 41.5+ MB\n",
      "None\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th># mean_0_a</th>\n",
       "      <th>mean_1_a</th>\n",
       "      <th>mean_2_a</th>\n",
       "      <th>mean_3_a</th>\n",
       "      <th>mean_4_a</th>\n",
       "      <th>mean_d_0_a</th>\n",
       "      <th>mean_d_1_a</th>\n",
       "      <th>mean_d_2_a</th>\n",
       "      <th>mean_d_3_a</th>\n",
       "      <th>mean_d_4_a</th>\n",
       "      <th>...</th>\n",
       "      <th>fft_740_b</th>\n",
       "      <th>fft_741_b</th>\n",
       "      <th>fft_742_b</th>\n",
       "      <th>fft_743_b</th>\n",
       "      <th>fft_744_b</th>\n",
       "      <th>fft_745_b</th>\n",
       "      <th>fft_746_b</th>\n",
       "      <th>fft_747_b</th>\n",
       "      <th>fft_748_b</th>\n",
       "      <th>fft_749_b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>15.256914</td>\n",
       "      <td>27.012462</td>\n",
       "      <td>-104.975629</td>\n",
       "      <td>13.605898</td>\n",
       "      <td>24.150483</td>\n",
       "      <td>0.025378</td>\n",
       "      <td>0.052282</td>\n",
       "      <td>0.301655</td>\n",
       "      <td>0.036793</td>\n",
       "      <td>0.083567</td>\n",
       "      <td>...</td>\n",
       "      <td>-22.938971</td>\n",
       "      <td>104.946111</td>\n",
       "      <td>-51.973647</td>\n",
       "      <td>-51.973647</td>\n",
       "      <td>104.946111</td>\n",
       "      <td>-6.934144</td>\n",
       "      <td>95.104886</td>\n",
       "      <td>-49.061255</td>\n",
       "      <td>-49.061255</td>\n",
       "      <td>95.104886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>15.284621</td>\n",
       "      <td>9.265141</td>\n",
       "      <td>206.271960</td>\n",
       "      <td>16.874676</td>\n",
       "      <td>14.187340</td>\n",
       "      <td>17.981796</td>\n",
       "      <td>8.509174</td>\n",
       "      <td>68.098894</td>\n",
       "      <td>17.010031</td>\n",
       "      <td>18.935378</td>\n",
       "      <td>...</td>\n",
       "      <td>298.034311</td>\n",
       "      <td>212.532721</td>\n",
       "      <td>112.160233</td>\n",
       "      <td>112.160233</td>\n",
       "      <td>212.532721</td>\n",
       "      <td>281.040552</td>\n",
       "      <td>203.194976</td>\n",
       "      <td>106.486317</td>\n",
       "      <td>106.486317</td>\n",
       "      <td>203.194976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-61.300000</td>\n",
       "      <td>-114.000000</td>\n",
       "      <td>-970.000000</td>\n",
       "      <td>-137.000000</td>\n",
       "      <td>-217.000000</td>\n",
       "      <td>-218.000000</td>\n",
       "      <td>-255.000000</td>\n",
       "      <td>-1360.000000</td>\n",
       "      <td>-203.000000</td>\n",
       "      <td>-553.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>-1180.000000</td>\n",
       "      <td>-921.000000</td>\n",
       "      <td>-504.000000</td>\n",
       "      <td>-504.000000</td>\n",
       "      <td>-921.000000</td>\n",
       "      <td>-1160.000000</td>\n",
       "      <td>-1010.000000</td>\n",
       "      <td>-521.000000</td>\n",
       "      <td>-521.000000</td>\n",
       "      <td>-1010.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.577500</td>\n",
       "      <td>26.075000</td>\n",
       "      <td>-195.000000</td>\n",
       "      <td>4.857500</td>\n",
       "      <td>23.600000</td>\n",
       "      <td>-3.105000</td>\n",
       "      <td>-1.340000</td>\n",
       "      <td>-4.002500</td>\n",
       "      <td>-2.905000</td>\n",
       "      <td>-2.622500</td>\n",
       "      <td>...</td>\n",
       "      <td>-106.500000</td>\n",
       "      <td>-8.365000</td>\n",
       "      <td>-92.900000</td>\n",
       "      <td>-92.900000</td>\n",
       "      <td>-8.365000</td>\n",
       "      <td>-102.500000</td>\n",
       "      <td>-8.837500</td>\n",
       "      <td>-87.150000</td>\n",
       "      <td>-87.150000</td>\n",
       "      <td>-8.837500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>14.100000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>15.400000</td>\n",
       "      <td>25.200000</td>\n",
       "      <td>-0.044600</td>\n",
       "      <td>0.132000</td>\n",
       "      <td>0.957500</td>\n",
       "      <td>-0.099750</td>\n",
       "      <td>0.146500</td>\n",
       "      <td>...</td>\n",
       "      <td>83.850000</td>\n",
       "      <td>12.150000</td>\n",
       "      <td>-21.800000</td>\n",
       "      <td>-21.800000</td>\n",
       "      <td>12.150000</td>\n",
       "      <td>89.700000</td>\n",
       "      <td>13.400000</td>\n",
       "      <td>-24.100000</td>\n",
       "      <td>-24.100000</td>\n",
       "      <td>13.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>27.700000</td>\n",
       "      <td>31.400000</td>\n",
       "      <td>29.600000</td>\n",
       "      <td>26.500000</td>\n",
       "      <td>26.800000</td>\n",
       "      <td>2.920000</td>\n",
       "      <td>1.540000</td>\n",
       "      <td>6.735000</td>\n",
       "      <td>2.535000</td>\n",
       "      <td>2.870000</td>\n",
       "      <td>...</td>\n",
       "      <td>154.000000</td>\n",
       "      <td>177.000000</td>\n",
       "      <td>12.025000</td>\n",
       "      <td>12.025000</td>\n",
       "      <td>177.000000</td>\n",
       "      <td>153.000000</td>\n",
       "      <td>149.250000</td>\n",
       "      <td>10.925000</td>\n",
       "      <td>10.925000</td>\n",
       "      <td>149.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>304.000000</td>\n",
       "      <td>42.300000</td>\n",
       "      <td>661.000000</td>\n",
       "      <td>206.000000</td>\n",
       "      <td>213.000000</td>\n",
       "      <td>402.000000</td>\n",
       "      <td>257.000000</td>\n",
       "      <td>1150.000000</td>\n",
       "      <td>349.000000</td>\n",
       "      <td>444.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1070.000000</td>\n",
       "      <td>843.000000</td>\n",
       "      <td>1490.000000</td>\n",
       "      <td>1490.000000</td>\n",
       "      <td>843.000000</td>\n",
       "      <td>1180.000000</td>\n",
       "      <td>888.000000</td>\n",
       "      <td>1670.000000</td>\n",
       "      <td>1670.000000</td>\n",
       "      <td>888.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 2548 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        # mean_0_a     mean_1_a     mean_2_a     mean_3_a     mean_4_a  \\\n",
       "count  2132.000000  2132.000000  2132.000000  2132.000000  2132.000000   \n",
       "mean     15.256914    27.012462  -104.975629    13.605898    24.150483   \n",
       "std      15.284621     9.265141   206.271960    16.874676    14.187340   \n",
       "min     -61.300000  -114.000000  -970.000000  -137.000000  -217.000000   \n",
       "25%       6.577500    26.075000  -195.000000     4.857500    23.600000   \n",
       "50%      14.100000    30.000000    14.950000    15.400000    25.200000   \n",
       "75%      27.700000    31.400000    29.600000    26.500000    26.800000   \n",
       "max     304.000000    42.300000   661.000000   206.000000   213.000000   \n",
       "\n",
       "        mean_d_0_a   mean_d_1_a   mean_d_2_a   mean_d_3_a   mean_d_4_a  ...  \\\n",
       "count  2132.000000  2132.000000  2132.000000  2132.000000  2132.000000  ...   \n",
       "mean      0.025378     0.052282     0.301655     0.036793     0.083567  ...   \n",
       "std      17.981796     8.509174    68.098894    17.010031    18.935378  ...   \n",
       "min    -218.000000  -255.000000 -1360.000000  -203.000000  -553.000000  ...   \n",
       "25%      -3.105000    -1.340000    -4.002500    -2.905000    -2.622500  ...   \n",
       "50%      -0.044600     0.132000     0.957500    -0.099750     0.146500  ...   \n",
       "75%       2.920000     1.540000     6.735000     2.535000     2.870000  ...   \n",
       "max     402.000000   257.000000  1150.000000   349.000000   444.000000  ...   \n",
       "\n",
       "         fft_740_b    fft_741_b    fft_742_b    fft_743_b    fft_744_b  \\\n",
       "count  2132.000000  2132.000000  2132.000000  2132.000000  2132.000000   \n",
       "mean    -22.938971   104.946111   -51.973647   -51.973647   104.946111   \n",
       "std     298.034311   212.532721   112.160233   112.160233   212.532721   \n",
       "min   -1180.000000  -921.000000  -504.000000  -504.000000  -921.000000   \n",
       "25%    -106.500000    -8.365000   -92.900000   -92.900000    -8.365000   \n",
       "50%      83.850000    12.150000   -21.800000   -21.800000    12.150000   \n",
       "75%     154.000000   177.000000    12.025000    12.025000   177.000000   \n",
       "max    1070.000000   843.000000  1490.000000  1490.000000   843.000000   \n",
       "\n",
       "         fft_745_b    fft_746_b    fft_747_b    fft_748_b    fft_749_b  \n",
       "count  2132.000000  2132.000000  2132.000000  2132.000000  2132.000000  \n",
       "mean     -6.934144    95.104886   -49.061255   -49.061255    95.104886  \n",
       "std     281.040552   203.194976   106.486317   106.486317   203.194976  \n",
       "min   -1160.000000 -1010.000000  -521.000000  -521.000000 -1010.000000  \n",
       "25%    -102.500000    -8.837500   -87.150000   -87.150000    -8.837500  \n",
       "50%      89.700000    13.400000   -24.100000   -24.100000    13.400000  \n",
       "75%     153.000000   149.250000    10.925000    10.925000   149.250000  \n",
       "max    1180.000000   888.000000  1670.000000  1670.000000   888.000000  \n",
       "\n",
       "[8 rows x 2548 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df.info())\n",
    "\n",
    "print(\"\\n\")\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c59016e",
   "metadata": {
    "papermill": {
     "duration": 0.01348,
     "end_time": "2024-09-25T02:13:29.500434",
     "exception": false,
     "start_time": "2024-09-25T02:13:29.486954",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9c5f6a2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:13:29.529385Z",
     "iopub.status.busy": "2024-09-25T02:13:29.528959Z",
     "iopub.status.idle": "2024-09-25T02:13:39.207223Z",
     "shell.execute_reply": "2024-09-25T02:13:39.206152Z"
    },
    "papermill": {
     "duration": 9.69614,
     "end_time": "2024-09-25T02:13:39.210164",
     "exception": false,
     "start_time": "2024-09-25T02:13:29.514024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Input, Dense, Concatenate\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4da0c4e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:13:39.240865Z",
     "iopub.status.busy": "2024-09-25T02:13:39.239973Z",
     "iopub.status.idle": "2024-09-25T02:13:39.486764Z",
     "shell.execute_reply": "2024-09-25T02:13:39.485537Z"
    },
    "papermill": {
     "duration": 0.265411,
     "end_time": "2024-09-25T02:13:39.489897",
     "exception": false,
     "start_time": "2024-09-25T02:13:39.224486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "df_2 = df.drop([\"label\"], axis=1)\n",
    "\n",
    "X = pd.DataFrame(scaler.fit_transform(df_2))\n",
    "\n",
    "# Change label values\n",
    "label_e = LabelEncoder()\n",
    "df['label']=label_e.fit_transform(df['label'])\n",
    "# neutral = 0, negative=1, positive=2\n",
    "\n",
    "# 80% of data used for training, 20% for testing\n",
    "y = df[\"label\"]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=48)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b2b645e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:13:39.520059Z",
     "iopub.status.busy": "2024-09-25T02:13:39.519649Z",
     "iopub.status.idle": "2024-09-25T02:14:18.256193Z",
     "shell.execute_reply": "2024-09-25T02:14:18.254588Z"
    },
    "papermill": {
     "duration": 38.767777,
     "end_time": "2024-09-25T02:14:18.271767",
     "exception": false,
     "start_time": "2024-09-25T02:13:39.503990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 5 Positive Correlations:\n",
      "1857  1854    1.0\n",
      "1858  959     1.0\n",
      "1859  960     1.0\n",
      "      963     1.0\n",
      "1860  961     1.0\n",
      "dtype: float64\n",
      "\n",
      "Top 5 Negative Correlations:\n",
      "211   210    -0.97\n",
      "222   210    -0.97\n",
      "1484  1485   -0.97\n",
      "210   222    -0.97\n",
      "1484  1496   -0.97\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Assuming X is your DataFrame\n",
    "corr_matrix = X.corr().round(2)\n",
    "\n",
    "# Unstack the correlation matrix and sort by correlation values\n",
    "corr_pairs = corr_matrix.unstack().sort_values(kind=\"quicksort\")\n",
    "\n",
    "# Filter out self-correlations\n",
    "filtered_corr_pairs = corr_pairs[corr_pairs.index.get_level_values(0) != corr_pairs.index.get_level_values(1)]\n",
    "\n",
    "# Print top 5 positive correlations\n",
    "print(\"Top 5 Positive Correlations:\")\n",
    "print(filtered_corr_pairs[-5:])\n",
    "\n",
    "# Print top 5 negative correlations\n",
    "print(\"\\nTop 5 Negative Correlations:\")\n",
    "print(filtered_corr_pairs[:5])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "168a9158",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:14:18.301635Z",
     "iopub.status.busy": "2024-09-25T02:14:18.301132Z",
     "iopub.status.idle": "2024-09-25T02:16:36.124137Z",
     "shell.execute_reply": "2024-09-25T02:16:36.122854Z"
    },
    "papermill": {
     "duration": 137.841559,
     "end_time": "2024-09-25T02:16:36.127283",
     "exception": false,
     "start_time": "2024-09-25T02:14:18.285724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "threshold = 0.6  # Set a threshold for strong correlations\n",
    "G = nx.Graph() \n",
    "\n",
    "for i in range(len(corr_matrix)):\n",
    "    for j in range(i+1, len(corr_matrix)):  # Avoid redundant edges\n",
    "        if abs(corr_matrix.iloc[i, j]) > threshold:\n",
    "            G.add_edge(corr_matrix.columns[i], corr_matrix.columns[j], weight=corr_matrix.iloc[i, j])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9051acbe",
   "metadata": {
    "papermill": {
     "duration": 0.014157,
     "end_time": "2024-09-25T02:16:36.155449",
     "exception": false,
     "start_time": "2024-09-25T02:16:36.141292",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Hyperparameter Tuning To Get the Optimal Parameter Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "be9c7d57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:16:36.185631Z",
     "iopub.status.busy": "2024-09-25T02:16:36.184446Z",
     "iopub.status.idle": "2024-09-25T02:44:13.884791Z",
     "shell.execute_reply": "2024-09-25T02:44:13.883227Z"
    },
    "papermill": {
     "duration": 1657.750849,
     "end_time": "2024-09-25T02:44:13.919975",
     "exception": false,
     "start_time": "2024-09-25T02:16:36.169126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "aa2a145307d94307a4ddca97bb400b9d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/4 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters for lr:\n",
      "{'C': 1, 'penalty': 'l1', 'solver': 'liblinear'}\n",
      "Best Parameters for svm:\n",
      "{'C': 100, 'gamma': 0.0001, 'kernel': 'rbf'}\n",
      "Best Parameters for lsvm:\n",
      "{'C': 0.1, 'max_iter': 1800}\n",
      "Best Parameters for mlp:\n",
      "{'alpha': 0.001, 'hidden_layer_sizes': (100,), 'max_iter': 400, 'solver': 'lbfgs'}\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "from tqdm.notebook import tqdm\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from time import sleep\n",
    "\n",
    "\n",
    "estimators = [\n",
    "    ('lr', LogisticRegression(random_state=48)),\n",
    "    ('svm', SVC()),\n",
    "    ('lsvm', LinearSVC()),\n",
    "    ('mlp', MLPClassifier())\n",
    "]\n",
    "\n",
    "param_grids = {\n",
    "    'svm': {\n",
    "        'C': [0.1, 1, 10, 100],\n",
    "        'gamma': [0.01, 0.001, 0.0001],\n",
    "        'kernel': ['rbf', 'linear', 'poly', 'sigmoid']\n",
    "    },\n",
    "    'lsvm': {\n",
    "        'C': [0.1, 1, 10, 100],\n",
    "        'max_iter': [1800, 2000, 2500]\n",
    "    },\n",
    "    'mlp': {\n",
    "        'hidden_layer_sizes': [(100,), (100, 50), (100, 100)],\n",
    "        'solver': [\"lbfgs\", \"sgd\", \"adam\"],\n",
    "        'alpha': [0.001, 0.0001],\n",
    "        'max_iter': [400, 600]\n",
    "    },\n",
    "    'lr': {\n",
    "            'C': [0.1, 1, 10, 100],\n",
    "            'penalty': ['l1', 'l2'], \n",
    "            'solver': ['liblinear', 'saga']  \n",
    "        }\n",
    "}\n",
    "\n",
    "best_params = {}\n",
    "\n",
    "# Perform grid search for each estimator\n",
    "for idx, (name, estimator) in enumerate(tqdm(estimators)):\n",
    "    sleep(0.01)\n",
    "    param_grid = param_grids[name]\n",
    "    grid = GridSearchCV(estimator, param_grid, refit=True, verbose=0, n_jobs=-1)    \n",
    "    \n",
    "    with warnings.catch_warnings():\n",
    "        warnings.simplefilter(\"ignore\", category=ConvergenceWarning)\n",
    "    \n",
    "        grid.fit(X_train, y_train)   \n",
    "\n",
    "    best_params[name] = grid.best_params_\n",
    "\n",
    "    # Access the best parameters \n",
    "for name, best_params in best_params.items():\n",
    "    print(f\"Best Parameters for {name}:\")\n",
    "    print(best_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86ca2e8b",
   "metadata": {
    "papermill": {
     "duration": 0.019931,
     "end_time": "2024-09-25T02:44:13.975195",
     "exception": false,
     "start_time": "2024-09-25T02:44:13.955264",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Best Parameters for svm:\\\n",
    "{'C': 100, 'gamma': 0.0001, 'kernel': 'rbf'}\n",
    "\n",
    "Best Parameters for lsvm:\\\n",
    "{'C': 0.1, 'max_iter': 1800}\n",
    "\n",
    "Best Parameters for mlp:\\\n",
    "{'alpha': 0.0001, 'hidden_layer_sizes': (100, 50), 'max_iter': 600, 'solver': 'lbfgs'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cc6b92eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:14.019149Z",
     "iopub.status.busy": "2024-09-25T02:44:14.018708Z",
     "iopub.status.idle": "2024-09-25T02:44:14.026209Z",
     "shell.execute_reply": "2024-09-25T02:44:14.024922Z"
    },
    "papermill": {
     "duration": 0.032999,
     "end_time": "2024-09-25T02:44:14.028550",
     "exception": false,
     "start_time": "2024-09-25T02:44:13.995551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Building Model from the best parameters obained in the previous step\n",
    "models = {\n",
    "    \"SVM\": SVC(C=100, gamma=0.0001, kernel='rbf'), \n",
    "    \"linearSVC\": LinearSVC(C=0.1, max_iter=1800), \n",
    "    \"MLP\": MLPClassifier(alpha=0.0001, hidden_layer_sizes=(100, 50), solver='lbfgs', max_iter=600),\n",
    "    \"LR\": LogisticRegression(random_state=48,C=1,penalty='l1',solver='liblinear')  # Add LR with best params\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ee5ca55d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:14.071993Z",
     "iopub.status.busy": "2024-09-25T02:44:14.071551Z",
     "iopub.status.idle": "2024-09-25T02:44:14.083981Z",
     "shell.execute_reply": "2024-09-25T02:44:14.082948Z"
    },
    "papermill": {
     "duration": 0.037132,
     "end_time": "2024-09-25T02:44:14.086883",
     "exception": false,
     "start_time": "2024-09-25T02:44:14.049751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import time\n",
    "from memory_profiler import memory_usage\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.linear_model import LogisticRegression "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2c70424f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:14.131443Z",
     "iopub.status.busy": "2024-09-25T02:44:14.131032Z",
     "iopub.status.idle": "2024-09-25T02:44:14.136625Z",
     "shell.execute_reply": "2024-09-25T02:44:14.135264Z"
    },
    "papermill": {
     "duration": 0.030941,
     "end_time": "2024-09-25T02:44:14.139318",
     "exception": false,
     "start_time": "2024-09-25T02:44:14.108377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# for name, model in models.items():\n",
    "#     start_time = time.time()\n",
    "#     model.fit(X_train, y_train)\n",
    "#     end_time = time.time()\n",
    "#     print(f\"{name} Execution Time: {end_time - start_time} seconds\")\n",
    "\n",
    "#     mem_usage = memory_usage((model.fit, (X_train, y_train)))\n",
    "#     print(f\"{name} Memory Usage: {max(mem_usage) - min(mem_usage)} MiB\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c6fec2ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:14.183109Z",
     "iopub.status.busy": "2024-09-25T02:44:14.182692Z",
     "iopub.status.idle": "2024-09-25T02:44:14.188297Z",
     "shell.execute_reply": "2024-09-25T02:44:14.187193Z"
    },
    "papermill": {
     "duration": 0.03101,
     "end_time": "2024-09-25T02:44:14.190715",
     "exception": false,
     "start_time": "2024-09-25T02:44:14.159705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import matplotlib.pyplot as plt\n",
    "\n",
    "# # Your models and their execution times and memory usages\n",
    "# models = [\"SVM\", \"linearSVC\", \"MLP\", \"LR\"]\n",
    "# execution_times = [1.6705491542816162, 15.086317300796509, 7.72693395614624, 2.066843271255493]\n",
    "# memory_usages = [33.5, 99.42578125, 60.2578125, 166.01171875]\n",
    "\n",
    "# # Plotting\n",
    "# plt.figure(figsize=(12, 6))\n",
    "\n",
    "# plt.subplot(1, 2, 1)\n",
    "# plt.plot(models, execution_times, marker='o')\n",
    "# plt.title('Execution Time')\n",
    "# plt.xlabel('Models')\n",
    "# plt.ylabel('Time (seconds)')\n",
    "\n",
    "# plt.subplot(1, 2, 2)\n",
    "# plt.plot(models, memory_usages, marker='o')\n",
    "# plt.title('Memory Usage')\n",
    "# plt.xlabel('Models')\n",
    "# plt.ylabel('Memory (MiB)')\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37337630",
   "metadata": {
    "papermill": {
     "duration": 0.020134,
     "end_time": "2024-09-25T02:44:14.231841",
     "exception": false,
     "start_time": "2024-09-25T02:44:14.211707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6c64d214",
   "metadata": {
    "papermill": {
     "duration": 0.020524,
     "end_time": "2024-09-25T02:44:14.273794",
     "exception": false,
     "start_time": "2024-09-25T02:44:14.253270",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Let's Implement the best params in our models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9d2c6279",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:14.317321Z",
     "iopub.status.busy": "2024-09-25T02:44:14.316885Z",
     "iopub.status.idle": "2024-09-25T02:44:14.323348Z",
     "shell.execute_reply": "2024-09-25T02:44:14.322180Z"
    },
    "papermill": {
     "duration": 0.031662,
     "end_time": "2024-09-25T02:44:14.325959",
     "exception": false,
     "start_time": "2024-09-25T02:44:14.294297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def model_clf(clf, name, xtrain, ytrain, xtest, ytest):\n",
    "    clf.fit(xtrain, ytrain)\n",
    "    accuracy = clf.score(xtest, ytest)\n",
    "    print(f\"Accuracy for {name} model: {accuracy}\")\n",
    "    return clf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b890bd7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:14.369004Z",
     "iopub.status.busy": "2024-09-25T02:44:14.368079Z",
     "iopub.status.idle": "2024-09-25T02:44:38.564513Z",
     "shell.execute_reply": "2024-09-25T02:44:38.560263Z"
    },
    "papermill": {
     "duration": 24.222512,
     "end_time": "2024-09-25T02:44:38.568870",
     "exception": false,
     "start_time": "2024-09-25T02:44:14.346358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy for SVM model: 0.9695550351288056\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy for linearSVC model: 0.9672131147540983\n",
      "Accuracy for MLP model: 0.9859484777517564\n",
      "Accuracy for LR model: 0.9789227166276346\n"
     ]
    }
   ],
   "source": [
    "clf_list = []\n",
    "for name, clf in models.items():\n",
    "    model = model_clf(clf, name, X_train, y_train, X_test, y_test)\n",
    "    clf_list.append(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "930e8d89",
   "metadata": {
    "papermill": {
     "duration": 0.042848,
     "end_time": "2024-09-25T02:44:38.655636",
     "exception": false,
     "start_time": "2024-09-25T02:44:38.612788",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    " ### Our parameter tuned results show earlier:\n",
    "    \n",
    "*    SVM accuracy: **96.95%**\n",
    "*    Linear SVC accuracy: **96.72%**\n",
    "*    LR accuracy: **97.89%**\n",
    "*    MLP accuracy: **98%**\n",
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcc65b1a",
   "metadata": {
    "papermill": {
     "duration": 0.020403,
     "end_time": "2024-09-25T02:44:38.707742",
     "exception": false,
     "start_time": "2024-09-25T02:44:38.687339",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### New Results and Findings : After Further running\n",
    "\n",
    "* SVM model: **96.95%**\n",
    "* linearSVC model: **96.72%**\n",
    "* MLP model: **97.65%**\n",
    "* LR model: **97.89%**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e0387a9",
   "metadata": {
    "papermill": {
     "duration": 0.024316,
     "end_time": "2024-09-25T02:44:38.752792",
     "exception": false,
     "start_time": "2024-09-25T02:44:38.728476",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f52597a5",
   "metadata": {
    "papermill": {
     "duration": 0.022077,
     "end_time": "2024-09-25T02:44:38.796166",
     "exception": false,
     "start_time": "2024-09-25T02:44:38.774089",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Earlier Our most accurate model was MLP model (acc score = 98%) AND LR (and LR can be improved further and can surpass MLP also in long run) That we found out after hyperparameter tunning using grid search and using optimal params and some subsequent training the LR model outperformed the MLP AND Other models . Hence this model can be used in effective classification most of the time after some amount of training. And on second number we can still use MLP for classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4c026e91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:38.841278Z",
     "iopub.status.busy": "2024-09-25T02:44:38.840854Z",
     "iopub.status.idle": "2024-09-25T02:44:39.232531Z",
     "shell.execute_reply": "2024-09-25T02:44:39.231330Z"
    },
    "papermill": {
     "duration": 0.417163,
     "end_time": "2024-09-25T02:44:39.235153",
     "exception": false,
     "start_time": "2024-09-25T02:44:38.817990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = clf_list[2].predict(X_test)\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Greens\")\n",
    "plt.title(f\"Confusion Matrix for MLP Classifier\")\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"True\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "567ef4d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:39.280434Z",
     "iopub.status.busy": "2024-09-25T02:44:39.279986Z",
     "iopub.status.idle": "2024-09-25T02:44:39.300884Z",
     "shell.execute_reply": "2024-09-25T02:44:39.299332Z"
    },
    "papermill": {
     "duration": 0.047463,
     "end_time": "2024-09-25T02:44:39.304154",
     "exception": false,
     "start_time": "2024-09-25T02:44:39.256691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "****************** Classification Report *******************\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "    Positive       0.98      1.00      0.99       143\n",
      "     Neutral       0.99      0.99      0.99       144\n",
      "    Negative       0.99      0.96      0.98       140\n",
      "\n",
      "    accuracy                           0.99       427\n",
      "   macro avg       0.99      0.99      0.99       427\n",
      "weighted avg       0.99      0.99      0.99       427\n",
      "\n"
     ]
    }
   ],
   "source": [
    "clr = classification_report(y_test, y_pred, target_names={\"Neutral\",\"Positive\",\"Negative\"})\n",
    "print(\" Classification Report \".center(60, \"*\"))\n",
    "print(clr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "860f4ec8",
   "metadata": {
    "papermill": {
     "duration": 0.02931,
     "end_time": "2024-09-25T02:44:39.367738",
     "exception": false,
     "start_time": "2024-09-25T02:44:39.338428",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "*Possible Improvements:\n",
    "Hyperparameter tuning part takes quite long, the method to find the best parameters could be optimised.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "083c5ec9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:39.416524Z",
     "iopub.status.busy": "2024-09-25T02:44:39.416073Z",
     "iopub.status.idle": "2024-09-25T02:44:39.421750Z",
     "shell.execute_reply": "2024-09-25T02:44:39.420541Z"
    },
    "papermill": {
     "duration": 0.03127,
     "end_time": "2024-09-25T02:44:39.424177",
     "exception": false,
     "start_time": "2024-09-25T02:44:39.392907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4cd042b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:39.470891Z",
     "iopub.status.busy": "2024-09-25T02:44:39.469399Z",
     "iopub.status.idle": "2024-09-25T02:44:39.696032Z",
     "shell.execute_reply": "2024-09-25T02:44:39.694866Z"
    },
    "papermill": {
     "duration": 0.252855,
     "end_time": "2024-09-25T02:44:39.699141",
     "exception": false,
     "start_time": "2024-09-25T02:44:39.446286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Build the advanced neural network model\n",
    "model = tf.keras.Sequential([\n",
    "    tf.keras.layers.Input(shape=(X_train.shape[1],)),\n",
    "    tf.keras.layers.Dense(256, activation='relu'),\n",
    "    tf.keras.layers.Dropout(0.5),\n",
    "    tf.keras.layers.Dense(128, activation='relu'),\n",
    "    tf.keras.layers.Dropout(0.5),\n",
    "    tf.keras.layers.Dense(3, activation='softmax')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "be2bfc4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:39.744322Z",
     "iopub.status.busy": "2024-09-25T02:44:39.743887Z",
     "iopub.status.idle": "2024-09-25T02:44:39.765946Z",
     "shell.execute_reply": "2024-09-25T02:44:39.764790Z"
    },
    "papermill": {
     "duration": 0.047971,
     "end_time": "2024-09-25T02:44:39.768863",
     "exception": false,
     "start_time": "2024-09-25T02:44:39.720892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer='adam',\n",
    "              loss='sparse_categorical_crossentropy',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f2bd68f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:44:39.813970Z",
     "iopub.status.busy": "2024-09-25T02:44:39.813507Z",
     "iopub.status.idle": "2024-09-25T02:45:07.394676Z",
     "shell.execute_reply": "2024-09-25T02:45:07.393656Z"
    },
    "papermill": {
     "duration": 27.607108,
     "end_time": "2024-09-25T02:45:07.397464",
     "exception": false,
     "start_time": "2024-09-25T02:44:39.790356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/70\n",
      "43/43 - 2s - loss: 1.2630 - accuracy: 0.7463 - val_loss: 0.2972 - val_accuracy: 0.9472 - 2s/epoch - 37ms/step\n",
      "Epoch 2/70\n",
      "43/43 - 0s - loss: 0.8256 - accuracy: 0.8255 - val_loss: 0.1975 - val_accuracy: 0.9326 - 360ms/epoch - 8ms/step\n",
      "Epoch 3/70\n",
      "43/43 - 0s - loss: 0.6252 - accuracy: 0.8614 - val_loss: 0.1663 - val_accuracy: 0.9355 - 354ms/epoch - 8ms/step\n",
      "Epoch 4/70\n",
      "43/43 - 0s - loss: 0.5250 - accuracy: 0.8842 - val_loss: 0.1576 - val_accuracy: 0.9355 - 354ms/epoch - 8ms/step\n",
      "Epoch 5/70\n",
      "43/43 - 0s - loss: 0.3525 - accuracy: 0.8981 - val_loss: 0.1467 - val_accuracy: 0.9267 - 357ms/epoch - 8ms/step\n",
      "Epoch 6/70\n",
      "43/43 - 0s - loss: 0.2550 - accuracy: 0.9186 - val_loss: 0.1409 - val_accuracy: 0.9443 - 354ms/epoch - 8ms/step\n",
      "Epoch 7/70\n",
      "43/43 - 0s - loss: 0.2919 - accuracy: 0.9150 - val_loss: 0.1355 - val_accuracy: 0.9531 - 358ms/epoch - 8ms/step\n",
      "Epoch 8/70\n",
      "43/43 - 0s - loss: 0.2550 - accuracy: 0.9164 - val_loss: 0.1227 - val_accuracy: 0.9472 - 349ms/epoch - 8ms/step\n",
      "Epoch 9/70\n",
      "43/43 - 0s - loss: 0.2267 - accuracy: 0.9230 - val_loss: 0.1167 - val_accuracy: 0.9472 - 376ms/epoch - 9ms/step\n",
      "Epoch 10/70\n",
      "43/43 - 0s - loss: 0.2329 - accuracy: 0.9289 - val_loss: 0.1614 - val_accuracy: 0.9472 - 342ms/epoch - 8ms/step\n",
      "Epoch 11/70\n",
      "43/43 - 0s - loss: 0.1916 - accuracy: 0.9406 - val_loss: 0.1260 - val_accuracy: 0.9560 - 349ms/epoch - 8ms/step\n",
      "Epoch 12/70\n",
      "43/43 - 0s - loss: 0.1461 - accuracy: 0.9501 - val_loss: 0.1128 - val_accuracy: 0.9560 - 346ms/epoch - 8ms/step\n",
      "Epoch 13/70\n",
      "43/43 - 0s - loss: 0.1826 - accuracy: 0.9428 - val_loss: 0.1110 - val_accuracy: 0.9619 - 341ms/epoch - 8ms/step\n",
      "Epoch 14/70\n",
      "43/43 - 0s - loss: 0.1471 - accuracy: 0.9509 - val_loss: 0.1028 - val_accuracy: 0.9589 - 345ms/epoch - 8ms/step\n",
      "Epoch 15/70\n",
      "43/43 - 0s - loss: 0.1638 - accuracy: 0.9435 - val_loss: 0.1157 - val_accuracy: 0.9560 - 357ms/epoch - 8ms/step\n",
      "Epoch 16/70\n",
      "43/43 - 0s - loss: 0.1036 - accuracy: 0.9553 - val_loss: 0.1139 - val_accuracy: 0.9560 - 350ms/epoch - 8ms/step\n",
      "Epoch 17/70\n",
      "43/43 - 0s - loss: 0.1125 - accuracy: 0.9619 - val_loss: 0.0818 - val_accuracy: 0.9619 - 406ms/epoch - 9ms/step\n",
      "Epoch 18/70\n",
      "43/43 - 0s - loss: 0.0769 - accuracy: 0.9743 - val_loss: 0.1128 - val_accuracy: 0.9531 - 407ms/epoch - 9ms/step\n",
      "Epoch 19/70\n",
      "43/43 - 0s - loss: 0.0853 - accuracy: 0.9736 - val_loss: 0.1180 - val_accuracy: 0.9589 - 426ms/epoch - 10ms/step\n",
      "Epoch 20/70\n",
      "43/43 - 0s - loss: 0.1055 - accuracy: 0.9641 - val_loss: 0.1265 - val_accuracy: 0.9531 - 461ms/epoch - 11ms/step\n",
      "Epoch 21/70\n",
      "43/43 - 0s - loss: 0.0919 - accuracy: 0.9714 - val_loss: 0.0664 - val_accuracy: 0.9736 - 384ms/epoch - 9ms/step\n",
      "Epoch 22/70\n",
      "43/43 - 0s - loss: 0.1125 - accuracy: 0.9648 - val_loss: 0.1318 - val_accuracy: 0.9648 - 364ms/epoch - 8ms/step\n",
      "Epoch 23/70\n",
      "43/43 - 0s - loss: 0.1418 - accuracy: 0.9692 - val_loss: 0.1070 - val_accuracy: 0.9619 - 352ms/epoch - 8ms/step\n",
      "Epoch 24/70\n",
      "43/43 - 0s - loss: 0.0911 - accuracy: 0.9707 - val_loss: 0.1267 - val_accuracy: 0.9648 - 349ms/epoch - 8ms/step\n",
      "Epoch 25/70\n",
      "43/43 - 0s - loss: 0.0769 - accuracy: 0.9743 - val_loss: 0.0946 - val_accuracy: 0.9707 - 344ms/epoch - 8ms/step\n",
      "Epoch 26/70\n",
      "43/43 - 0s - loss: 0.0833 - accuracy: 0.9795 - val_loss: 0.1488 - val_accuracy: 0.9619 - 361ms/epoch - 8ms/step\n",
      "Epoch 27/70\n",
      "43/43 - 0s - loss: 0.0757 - accuracy: 0.9765 - val_loss: 0.0999 - val_accuracy: 0.9736 - 350ms/epoch - 8ms/step\n",
      "Epoch 28/70\n",
      "43/43 - 0s - loss: 0.0612 - accuracy: 0.9787 - val_loss: 0.1283 - val_accuracy: 0.9589 - 365ms/epoch - 8ms/step\n",
      "Epoch 29/70\n",
      "43/43 - 0s - loss: 0.0364 - accuracy: 0.9905 - val_loss: 0.1307 - val_accuracy: 0.9677 - 355ms/epoch - 8ms/step\n",
      "Epoch 30/70\n",
      "43/43 - 0s - loss: 0.0568 - accuracy: 0.9802 - val_loss: 0.0796 - val_accuracy: 0.9648 - 364ms/epoch - 8ms/step\n",
      "Epoch 31/70\n",
      "43/43 - 0s - loss: 0.1121 - accuracy: 0.9831 - val_loss: 0.0646 - val_accuracy: 0.9677 - 361ms/epoch - 8ms/step\n",
      "Epoch 32/70\n",
      "43/43 - 0s - loss: 0.0516 - accuracy: 0.9868 - val_loss: 0.0917 - val_accuracy: 0.9677 - 357ms/epoch - 8ms/step\n",
      "Epoch 33/70\n",
      "43/43 - 0s - loss: 0.0710 - accuracy: 0.9787 - val_loss: 0.0751 - val_accuracy: 0.9707 - 354ms/epoch - 8ms/step\n",
      "Epoch 34/70\n",
      "43/43 - 0s - loss: 0.0549 - accuracy: 0.9802 - val_loss: 0.0842 - val_accuracy: 0.9677 - 351ms/epoch - 8ms/step\n",
      "Epoch 35/70\n",
      "43/43 - 0s - loss: 0.0551 - accuracy: 0.9824 - val_loss: 0.0992 - val_accuracy: 0.9677 - 353ms/epoch - 8ms/step\n",
      "Epoch 36/70\n",
      "43/43 - 0s - loss: 0.0805 - accuracy: 0.9817 - val_loss: 0.1215 - val_accuracy: 0.9765 - 341ms/epoch - 8ms/step\n",
      "Epoch 37/70\n",
      "43/43 - 0s - loss: 0.0708 - accuracy: 0.9780 - val_loss: 0.1492 - val_accuracy: 0.9589 - 360ms/epoch - 8ms/step\n",
      "Epoch 38/70\n",
      "43/43 - 0s - loss: 0.0779 - accuracy: 0.9773 - val_loss: 0.0845 - val_accuracy: 0.9648 - 344ms/epoch - 8ms/step\n",
      "Epoch 39/70\n",
      "43/43 - 0s - loss: 0.0329 - accuracy: 0.9875 - val_loss: 0.0994 - val_accuracy: 0.9795 - 344ms/epoch - 8ms/step\n",
      "Epoch 40/70\n",
      "43/43 - 0s - loss: 0.0590 - accuracy: 0.9868 - val_loss: 0.2091 - val_accuracy: 0.9648 - 347ms/epoch - 8ms/step\n",
      "Epoch 41/70\n",
      "43/43 - 0s - loss: 0.0615 - accuracy: 0.9831 - val_loss: 0.0769 - val_accuracy: 0.9795 - 353ms/epoch - 8ms/step\n",
      "Epoch 42/70\n",
      "43/43 - 0s - loss: 0.0370 - accuracy: 0.9875 - val_loss: 0.1116 - val_accuracy: 0.9765 - 353ms/epoch - 8ms/step\n",
      "Epoch 43/70\n",
      "43/43 - 0s - loss: 0.0389 - accuracy: 0.9875 - val_loss: 0.0823 - val_accuracy: 0.9795 - 355ms/epoch - 8ms/step\n",
      "Epoch 44/70\n",
      "43/43 - 0s - loss: 0.0302 - accuracy: 0.9883 - val_loss: 0.1148 - val_accuracy: 0.9648 - 354ms/epoch - 8ms/step\n",
      "Epoch 45/70\n",
      "43/43 - 0s - loss: 0.0396 - accuracy: 0.9912 - val_loss: 0.1476 - val_accuracy: 0.9707 - 362ms/epoch - 8ms/step\n",
      "Epoch 46/70\n",
      "43/43 - 0s - loss: 0.0238 - accuracy: 0.9934 - val_loss: 0.1266 - val_accuracy: 0.9736 - 356ms/epoch - 8ms/step\n",
      "Epoch 47/70\n",
      "43/43 - 0s - loss: 0.0358 - accuracy: 0.9883 - val_loss: 0.1646 - val_accuracy: 0.9736 - 356ms/epoch - 8ms/step\n",
      "Epoch 48/70\n",
      "43/43 - 0s - loss: 0.0308 - accuracy: 0.9905 - val_loss: 0.1787 - val_accuracy: 0.9707 - 396ms/epoch - 9ms/step\n",
      "Epoch 49/70\n",
      "43/43 - 0s - loss: 0.0356 - accuracy: 0.9905 - val_loss: 0.1379 - val_accuracy: 0.9795 - 356ms/epoch - 8ms/step\n",
      "Epoch 50/70\n",
      "43/43 - 0s - loss: 0.0315 - accuracy: 0.9927 - val_loss: 0.1460 - val_accuracy: 0.9765 - 356ms/epoch - 8ms/step\n",
      "Epoch 51/70\n",
      "43/43 - 0s - loss: 0.0376 - accuracy: 0.9927 - val_loss: 0.1212 - val_accuracy: 0.9765 - 359ms/epoch - 8ms/step\n",
      "Epoch 52/70\n",
      "43/43 - 0s - loss: 0.0249 - accuracy: 0.9883 - val_loss: 0.1123 - val_accuracy: 0.9648 - 347ms/epoch - 8ms/step\n",
      "Epoch 53/70\n",
      "43/43 - 0s - loss: 0.0161 - accuracy: 0.9941 - val_loss: 0.0679 - val_accuracy: 0.9736 - 348ms/epoch - 8ms/step\n",
      "Epoch 54/70\n",
      "43/43 - 0s - loss: 0.0150 - accuracy: 0.9934 - val_loss: 0.1402 - val_accuracy: 0.9765 - 349ms/epoch - 8ms/step\n",
      "Epoch 55/70\n",
      "43/43 - 0s - loss: 0.0183 - accuracy: 0.9941 - val_loss: 0.1093 - val_accuracy: 0.9765 - 346ms/epoch - 8ms/step\n",
      "Epoch 56/70\n",
      "43/43 - 0s - loss: 0.0201 - accuracy: 0.9941 - val_loss: 0.1161 - val_accuracy: 0.9736 - 357ms/epoch - 8ms/step\n",
      "Epoch 57/70\n",
      "43/43 - 0s - loss: 0.0210 - accuracy: 0.9934 - val_loss: 0.1573 - val_accuracy: 0.9707 - 349ms/epoch - 8ms/step\n",
      "Epoch 58/70\n",
      "43/43 - 0s - loss: 0.0703 - accuracy: 0.9831 - val_loss: 0.0989 - val_accuracy: 0.9589 - 350ms/epoch - 8ms/step\n",
      "Epoch 59/70\n",
      "43/43 - 0s - loss: 0.0350 - accuracy: 0.9897 - val_loss: 0.2039 - val_accuracy: 0.9736 - 349ms/epoch - 8ms/step\n",
      "Epoch 60/70\n",
      "43/43 - 0s - loss: 0.0605 - accuracy: 0.9868 - val_loss: 0.2037 - val_accuracy: 0.9736 - 344ms/epoch - 8ms/step\n",
      "Epoch 61/70\n",
      "43/43 - 0s - loss: 0.0459 - accuracy: 0.9861 - val_loss: 0.3023 - val_accuracy: 0.9707 - 353ms/epoch - 8ms/step\n",
      "Epoch 62/70\n",
      "43/43 - 0s - loss: 0.0630 - accuracy: 0.9787 - val_loss: 0.1447 - val_accuracy: 0.9648 - 366ms/epoch - 9ms/step\n",
      "Epoch 63/70\n",
      "43/43 - 0s - loss: 0.0702 - accuracy: 0.9817 - val_loss: 0.1996 - val_accuracy: 0.9736 - 366ms/epoch - 9ms/step\n",
      "Epoch 64/70\n",
      "43/43 - 0s - loss: 0.0506 - accuracy: 0.9861 - val_loss: 0.1312 - val_accuracy: 0.9736 - 354ms/epoch - 8ms/step\n",
      "Epoch 65/70\n",
      "43/43 - 0s - loss: 0.0523 - accuracy: 0.9868 - val_loss: 0.0872 - val_accuracy: 0.9648 - 355ms/epoch - 8ms/step\n",
      "Epoch 66/70\n",
      "43/43 - 0s - loss: 0.0530 - accuracy: 0.9919 - val_loss: 0.1270 - val_accuracy: 0.9765 - 356ms/epoch - 8ms/step\n",
      "Epoch 67/70\n",
      "43/43 - 0s - loss: 0.0195 - accuracy: 0.9919 - val_loss: 0.1199 - val_accuracy: 0.9707 - 359ms/epoch - 8ms/step\n",
      "Epoch 68/70\n",
      "43/43 - 0s - loss: 0.0163 - accuracy: 0.9941 - val_loss: 0.1654 - val_accuracy: 0.9765 - 350ms/epoch - 8ms/step\n",
      "Epoch 69/70\n",
      "43/43 - 0s - loss: 0.0470 - accuracy: 0.9927 - val_loss: 0.1651 - val_accuracy: 0.9765 - 344ms/epoch - 8ms/step\n",
      "Epoch 70/70\n",
      "43/43 - 0s - loss: 0.0352 - accuracy: 0.9897 - val_loss: 0.1862 - val_accuracy: 0.9765 - 355ms/epoch - 8ms/step\n"
     ]
    }
   ],
   "source": [
    "# Train the model\n",
    "history = model.fit(X_train, y_train, validation_split=0.2, epochs=70, batch_size=32, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d2eafa61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:45:07.469056Z",
     "iopub.status.busy": "2024-09-25T02:45:07.467412Z",
     "iopub.status.idle": "2024-09-25T02:45:07.600354Z",
     "shell.execute_reply": "2024-09-25T02:45:07.598835Z"
    },
    "papermill": {
     "duration": 0.171991,
     "end_time": "2024-09-25T02:45:07.603198",
     "exception": false,
     "start_time": "2024-09-25T02:45:07.431207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 97.892%\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model\n",
    "model_acc = model.evaluate(X_test, y_test, verbose=0)[1]\n",
    "print(\"Test Accuracy: {:.3f}%\".format(model_acc * 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1718b952",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:45:07.672255Z",
     "iopub.status.busy": "2024-09-25T02:45:07.671853Z",
     "iopub.status.idle": "2024-09-25T02:45:07.911907Z",
     "shell.execute_reply": "2024-09-25T02:45:07.910510Z"
    },
    "papermill": {
     "duration": 0.278045,
     "end_time": "2024-09-25T02:45:07.914934",
     "exception": false,
     "start_time": "2024-09-25T02:45:07.636889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14/14 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "# Make predictions\n",
    "y_pred = np.argmax(model.predict(X_test), axis=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6b9fda27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:45:07.985430Z",
     "iopub.status.busy": "2024-09-25T02:45:07.985006Z",
     "iopub.status.idle": "2024-09-25T02:45:08.015541Z",
     "shell.execute_reply": "2024-09-25T02:45:08.014229Z"
    },
    "papermill": {
     "duration": 0.068929,
     "end_time": "2024-09-25T02:45:08.018364",
     "exception": false,
     "start_time": "2024-09-25T02:45:07.949435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "label_mapping = {'NEGATIVE': 0, 'NEUTRAL': 1, 'POSITIVE': 2}\n",
    "data=df.copy()\n",
    "data['label'] = df['label'].map(label_mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1e362c69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:45:08.090220Z",
     "iopub.status.busy": "2024-09-25T02:45:08.089762Z",
     "iopub.status.idle": "2024-09-25T02:45:08.106665Z",
     "shell.execute_reply": "2024-09-25T02:45:08.105550Z"
    },
    "papermill": {
     "duration": 0.056978,
     "end_time": "2024-09-25T02:45:08.109465",
     "exception": false,
     "start_time": "2024-09-25T02:45:08.052487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Confusion Matrix and Classification Report\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "clr = classification_report(y_test, y_pred, target_names=label_mapping.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ab703092",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:45:08.180253Z",
     "iopub.status.busy": "2024-09-25T02:45:08.179823Z",
     "iopub.status.idle": "2024-09-25T02:45:08.362953Z",
     "shell.execute_reply": "2024-09-25T02:45:08.361400Z"
    },
    "papermill": {
     "duration": 0.221347,
     "end_time": "2024-09-25T02:45:08.365635",
     "exception": false,
     "start_time": "2024-09-25T02:45:08.144288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization of Confusion Matrix\n",
    "plt.figure(figsize=(8, 8))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False, xticklabels=label_mapping.keys(), yticklabels=label_mapping.keys())\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a2cfe7fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:45:08.437413Z",
     "iopub.status.busy": "2024-09-25T02:45:08.436984Z",
     "iopub.status.idle": "2024-09-25T02:45:08.442949Z",
     "shell.execute_reply": "2024-09-25T02:45:08.441857Z"
    },
    "papermill": {
     "duration": 0.045811,
     "end_time": "2024-09-25T02:45:08.445981",
     "exception": false,
     "start_time": "2024-09-25T02:45:08.400170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    NEGATIVE       0.98      1.00      0.99       143\n",
      "     NEUTRAL       0.99      0.97      0.98       144\n",
      "    POSITIVE       0.97      0.96      0.97       140\n",
      "\n",
      "    accuracy                           0.98       427\n",
      "   macro avg       0.98      0.98      0.98       427\n",
      "weighted avg       0.98      0.98      0.98       427\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Classification Report:\\n\", clr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bb0769a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-25T02:45:08.518597Z",
     "iopub.status.busy": "2024-09-25T02:45:08.517352Z",
     "iopub.status.idle": "2024-09-25T02:45:08.712125Z",
     "shell.execute_reply": "2024-09-25T02:45:08.711044Z"
    },
    "papermill": {
     "duration": 0.23329,
     "end_time": "2024-09-25T02:45:08.714412",
     "exception": false,
     "start_time": "2024-09-25T02:45:08.481122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 65ms/step\n",
      "Sample 6: Real Emotion Label: NEGATIVE, Predicted Emotion Label: NEGATIVE\n",
      "1/1 [==============================] - 0s 22ms/step\n",
      "Sample 7: Real Emotion Label: NEUTRAL, Predicted Emotion Label: NEUTRAL\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "# Define a dictionary for emotion labels\n",
    "emotion_labels = {0: 'NEGATIVE', 1: 'NEUTRAL', 2: 'POSITIVE'}\n",
    "\n",
    "# Print the true and predicted emotion labels for 6 to 7 random samples\n",
    "for i in range(6, 8):\n",
    "    random_index = random.randint(0, len(X_test) - 1)\n",
    "    sample_input = X_test.iloc[random_index].values.reshape(1, -1)\n",
    "    true_label = y_test.iloc[random_index]\n",
    "    true_emotion = emotion_labels.get(true_label, 'Unknown')  # Use .get() to avoid KeyError\n",
    "\n",
    "    # Predict emotion for the sample input\n",
    "    predicted_emotion = model.predict(sample_input)\n",
    "    predicted_label = emotion_labels[np.argmax(predicted_emotion)]\n",
    "\n",
    "    # Display the true and predicted emotion labels\n",
    "    print(f\"Sample {i}: Real Emotion Label: {true_emotion}, Predicted Emotion Label: {predicted_label}\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 93959,
     "sourceId": 218459,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30558,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1919.384562,
   "end_time": "2024-09-25T02:45:11.476396",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-25T02:13:12.091834",
   "version": "2.4.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "098ab300a30b4dfe83b9bcdaec8ecbc1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "350928912af040e19eb00f62bfa89adc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_61287cc00b9b47459d6d7430cec2a9d8",
       "max": 4.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d521a18dd3634658888c6166042af21c",
       "value": 4.0
      }
     },
     "5ad9f61766b144af8152f67a84c0889e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "61287cc00b9b47459d6d7430cec2a9d8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "707730bdc8874f2f9e965b835c5e2a04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5ad9f61766b144af8152f67a84c0889e",
       "placeholder": "â€‹",
       "style": "IPY_MODEL_cb70a9659e5645c6b58217594c340bf9",
       "value": "100%"
      }
     },
     "780799f32ac14bd584bc44053429004e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8221c4cd0cd04c5c85f50eeefa35a250": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_780799f32ac14bd584bc44053429004e",
       "placeholder": "â€‹",
       "style": "IPY_MODEL_a5fafc0b2d5647ecb4968b33cd9f2cfc",
       "value": " 4/4 [27:37&lt;00:00, 496.32s/it]"
      }
     },
     "a5fafc0b2d5647ecb4968b33cd9f2cfc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "aa2a145307d94307a4ddca97bb400b9d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_707730bdc8874f2f9e965b835c5e2a04",
        "IPY_MODEL_350928912af040e19eb00f62bfa89adc",
        "IPY_MODEL_8221c4cd0cd04c5c85f50eeefa35a250"
       ],
       "layout": "IPY_MODEL_098ab300a30b4dfe83b9bcdaec8ecbc1"
      }
     },
     "cb70a9659e5645c6b58217594c340bf9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "d521a18dd3634658888c6166042af21c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
